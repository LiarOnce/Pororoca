name: CI-CD

on:
  workflow_call:
    inputs:
      runCD:
        required: true
        type: boolean
      os:
        required: true
        type: string
      postUnitTestsCoverageInPR:
        required: false
        default: false
        type: boolean
      prNumber:
        required: false
        default: 0
        type: number
      enableUITesting:
        required: true
        type: boolean
      uploadArtifactsToRelease:
        required: false
        default: false
        type: boolean
      producePororocaTestNuget:
        required: false
        default: false
        type: boolean
      produceDesktopLinuxX64:
        required: false
        default: false
        type: boolean
      produceDesktopDebianX64:
        required: false
        default: false
        type: boolean
      produceDesktopMacOSX:
        required: false
        default: false
        type: boolean
      produceDesktopWinX64Portable:
        required: false
        default: false
        type: boolean
      produceDesktopWinX64Installer:
        required: false
        default: false
        type: boolean
      produceDesktopWinX86Portable:
        required: false
        default: false
        type: boolean
      produceDesktopWinX86Installer:
        required: false
        default: false
        type: boolean

jobs:
  cicd:
    runs-on: inputs.os

    # start CI steps

    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 1

    - name: Install .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.204

    # GitHub Actions Windows Runners come with NSIS pre-installed
    # https://github.com/actions/runner-images/blob/main/images/windows/Windows2022-Readme.md
    # No need to install here

    - name: Restore solution
      run: dotnet restore --nologo --verbosity quiet

    - name: Audit Pororoca.Desktop project
      shell: pwsh
      run: |
        $projectPath = "./src/Pororoca.Desktop/Pororoca.Desktop.csproj"
        $jsonObj = (dotnet list $projectPath package --vulnerable --include-transitive --format json) | ConvertFrom-Json;
        $hasAnyVulnerability = ($jsonObj.projects[0].frameworks -ne $null);
        if ($hasAnyVulnerability) {
          dotnet list package --vulnerable --include-transitive;
          exit 1;
        }

    - name: Audit Pororoca.Test project
      shell: pwsh
      run: |
        $projectPath = "./src/Pororoca.Test/Pororoca.Test.csproj"
        $jsonObj = (dotnet list $projectPath package --vulnerable --include-transitive --format json) | ConvertFrom-Json;
        $hasAnyVulnerability = ($jsonObj.projects[0].frameworks -ne $null);
        if ($hasAnyVulnerability) {
          dotnet list package --vulnerable --include-transitive;
          exit 1;
        }

    - name: Build solution
      run: dotnet build --no-restore --configuration Release --nologo --verbosity quiet

    - name: Execute unit tests
      run: dotnet test --no-build --configuration Release --nologo --verbosity quiet --filter FullyQualifiedName!~Pororoca.Test.Tests --collect:"XPlat Code Coverage" --results-directory ./TestResults/

    - name: Report unit tests coverage
      if: ${{ inputs.postUnitTestsCoverageInPR }}
      uses: danielpalme/ReportGenerator-GitHub-Action@5.2.4
      with:
        reports: TestResults/**/coverage.cobertura.xml
        targetdir: TestResults
        reporttypes: JsonSummary
        assemblyfilters: +Pororoca.Domain;+Pororoca.Domain.OpenAPI
        filefilters: -*.g.cs
        customSettings: 'minimumCoverageThresholds:lineCoverage=90;minimumCoverageThresholds:branchCoverage=80'

    - name: Add unit tests coverage comment to PR
      if: ${{ inputs.postUnitTestsCoverageInPR }}
      shell: pwsh
      run: |
        $summary = (Get-Content ./TestResults/Summary.json) | ConvertFrom-Json;
        $lineCovBadgeColor = if ($summary.summary.linecoverage -ge 90.0) { "080" } else { "800" };
        $branchCovBadgeColor = if ($summary.summary.branchcoverage -ge 80.0) { "080" } else { "800" };
        $linesBadge = "![Line coverage](https://img.shields.io/badge/lines-" + $summary.summary.linecoverage + "%25-" + $lineCovBadgeColor + ")";
        $branchesBadge = "![Branch coverage](https://img.shields.io/badge/branches-" + $summary.summary.branchcoverage + "%25-" + $branchCovBadgeColor + ")";
        $text = "`#`#`# Unit tests code coverage " + $linesBadge + " " + $branchesBadge + "`n`n" + "| Assembly | Line coverage | Branch coverage |`n|---|---|---|`n";
        foreach ($assembly in $summary.coverage.assemblies)
        {
            $text += "| **$($assembly.name)** | $($assembly.coverage)% | $($assembly.branchcoverage)% |`n"
        }
        Set-Content -Path ./TestResults/SummaryGithub2.md -Value $text
        gh pr comment $env:PR_NUMBER --body-file ./TestResults/SummaryGithub2.md
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        PR_NUMBER: ${{ inputs.prNumber }}

    # finished CI steps

    # start CD steps - NuGet

    - name: Read NuGet version
      if: ${{ inputs.runCD && inputs.producePororocaTestNuget }}
      shell: pwsh
      run: |
        ([XML]$nugetCsprojXml = Get-Content ./src/Pororoca.Test/Pororoca.Test.csproj)
        $versionName = $nugetCsprojXml.Project.PropertyGroup.PackageVersion
        echo "NUGET_VERSION_NAME=${versionName}" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf8 -Append

    - name: Generate Pororoca.Test SBOM file
      if: ${{ inputs.runCD && inputs.producePororocaTestNuget }}
      shell: pwsh
      run: dotnet CycloneDX ./src/Pororoca.Test/Pororoca.Test.csproj -o ./out/ -f sbom_pororoca_test.json -sv $env:NUGET_VERSION_NAME --json

    - name: Pack NuGet
      if: ${{ inputs.runCD && inputs.producePororocaTestNuget }}
      run: |
        [void](New-Item "./out/" -ItemType Directory -ErrorAction Ignore);
        dotnet pack ./src/Pororoca.Test/Pororoca.Test.csproj --nologo --verbosity quiet --configuration Release
        Copy-Item -Path "./src/Pororoca.Test/bin/Release/Pororoca.Test.${env:NUGET_VERSION_NAME}.nupkg" -Destination ./out/

    # finished CD steps - NuGet

    # start CD steps - desktop

    - name: Parse desktop artifacts list
      # CD steps are invoked only via workflow_call
      if: ${{ inputs.runCD }}
      shell: pwsh
      run: |
        $arr = @()
        if ($env:LINUX_X64)         { $arr += @{ rid="linux-x64"; packaging=$null } };
        if ($env:DEBIAN_X64)        { $arr += @{ rid="linux-x64"; packaging="debian" } };
        if ($env:OSX)               { $arr += @{   rid="osx-x64"; packaging=$null } };
        if ($env:WIN_X64_INSTALLER) { $arr += @{   rid="win-x64"; packaging="nsis" } };
        if ($env:WIN_X64_PORTABLE)  { $arr += @{   rid="win-x64"; packaging=$null } };
        if ($env:WIN_X86_INSTALLER) { $arr += @{   rid="win-x86"; packaging="nsis" } };
        if ($env:WIN_X86_PORTABLE)  { $arr += @{   rid="win-x86"; packaging=$null } };

        $arrJson = $arr | ConvertTo-Json
        echo "DESKTOP_ARTIFACTS_LIST=${arrJson}" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf8 -Append
      env:
        LINUX_X64: ${{ inputs.produceDesktopLinuxX64 }}
        DEBIAN_X64: ${{ inputs.produceDesktopDebianX64 }}
        OSX: ${{ inputs.produceDesktopMacOSX }}
        WIN_X64_PORTABLE: ${{ inputs.produceDesktopWinX64Portable }}
        WIN_X64_INSTALLER: ${{ inputs.produceDesktopWinX64Installer }}
        WIN_X86_PORTABLE: ${{ inputs.produceDesktopWinX86Portable }}
        WIN_X86_INSTALLER: ${{ inputs.produceDesktopWinX86Installer }}

    - name: Read desktop program version
      shell: pwsh
      run: |
        ([XML]$desktopCsprojXml = Get-Content ./src/Pororoca.Desktop/Pororoca.Desktop.csproj)
        $versionName = $desktopCsprojXml.Project.PropertyGroup.Version
        echo "VERSION_NAME=${versionName}" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf8 -Append

    - name: Generate Pororoca.Desktop SBOM file
      shell: pwsh
      run: dotnet CycloneDX ./src/Pororoca.Desktop/Pororoca.Desktop.csproj -o ./out/ -f sbom_pororoca_desktop.json -sv $env:VERSION_NAME --json

    - name: Generate Pororoca Desktop dlls
      shell: pwsh
      run: |
        $list = $env:DESKTOP_ARTIFACTS_LIST | ConvertFrom-Json;
        foreach ($artifact in $list)
        {
          $OUTPUT_FOLDER = "./out/$($artifact.rid)";
          $PUBLISH_SINGLE_FILE = $artifact.rid.StartsWith("win") || $artifact.rid.StartsWith("linux");
          $WINDOWS_INSTALLER_RELEASE = $artifact.rid.StartsWith("win") && ($artifact.packaging -eq "nsis");
          $DEBIAN_INSTALLER_RELEASE = ($artifact.rid -eq "linux-x64") && ($artifact.packaging -eq "debian");

          [void](New-Item $OUTPUT_FOLDER -ItemType Directory -ErrorAction Ignore);
          dotnet publish ./src/Pororoca.Desktop/Pororoca.Desktop.csproj `
          --verbosity quiet `
          --nologo `
          --configuration Release `
          -p:PublishSingleFile=$PUBLISH_SINGLE_FILE `
          -p:PublishForInstallOnWindows=$WINDOWS_INSTALLER_RELEASE `
          -p:PublishForInstallOnDebian=$DEBIAN_INSTALLER_RELEASE `
          -p:UITestsEnabled=${env:ENABLE_UI_TESTING} `
          --self-contained true `
          --runtime $artifact.rid `
          --output $OUTPUT_FOLDER;

          # let's copy the msquic.dll file next to the generated .exe
          if ($artifact.rid -like "*win*")
          {
            Copy-Item -Path "./src/Pororoca.Desktop/bin/Release/net8.0/$($artifact.rid)/msquic.dll" -Destination $OUTPUT_FOLDER
          }

          # rename executable
          if ($artifact.rid -like "*win*")
          {
            Rename-Item -Path "$OUTPUT_FOLDER/Pororoca.Desktop.exe" -NewName "Pororoca.exe"
          }
          else
          {
            Rename-Item "$OUTPUT_FOLDER/Pororoca.Desktop" -NewName "Pororoca"
          }

          # set executable attributes (UNIX only)
          if (($artifact.rid -like "*linux*") -or ($artifact.rid -like "*osx*"))
          {
            chmod +x "$OUTPUT_FOLDER/Pororoca"
          }
        }
      env:
        ENABLE_UI_TESTING: ${{ inputs.enableUITesting }}

    - name: Make Pororoca.app structure (Mac OSX only)
      if: ${{ inputs.runCD }}
      shell: pwsh
      run: |
        $list = $env:DESKTOP_ARTIFACTS_LIST | ConvertFrom-Json;
        foreach ($artifact in $list)
        {
          if ($artifact.rid -like "*osx*")
          {
            $OUTPUT_FOLDER = "./out/$($artifact.rid)";
            [void](mkdir "$OUTPUT_FOLDER/Pororoca.app")
            [void](mkdir "$OUTPUT_FOLDER/Pororoca.app/Contents")
            [void](mkdir "$OUTPUT_FOLDER/Pororoca.app/Contents/MacOS")
            [void](mkdir "$OUTPUT_FOLDER/Pororoca.app/Contents/Resources")
            Copy-Item -Path "./src/Pororoca.Desktop.MacOSX/Info.plist" -Destination "$OUTPUT_FOLDER/Pororoca.app/Contents/"
            Copy-Item -Path "./src/Pororoca.Desktop.MacOSX/pororoca.icns" -Destination "$OUTPUT_FOLDER/Pororoca.app/Contents/Resources/"
            Get-ChildItem $OUTPUT_FOLDER -File | Copy-Item -Destination "$OUTPUT_FOLDER/Pororoca.app/Contents/MacOS/" -Force
            Get-ChildItem $OUTPUT_FOLDER -File | Remove-Item
          }
        }

    # so Linux users can create desktop launchers
    - name: Copy logo (Linux only)
      if: ${{ inputs.runCD }}
      shell: pwsh
      run: |
        $list = $env:DESKTOP_ARTIFACTS_LIST | ConvertFrom-Json;
        foreach ($artifact in $list)
        {
          if ($artifact.rid -like "*linux*")
          {
            $OUTPUT_FOLDER = "./out/$($artifact.rid)";
            Copy-Item -Path "./pororoca.png" -Destination $OUTPUT_FOLDER
          }
        }

    - name: Copy icon for Windows installer
      if: ${{ inputs.runCD }}
      shell: pwsh
      run: |
        $list = $env:DESKTOP_ARTIFACTS_LIST | ConvertFrom-Json;
        foreach ($artifact in $list)
        {
          if ($artifact.packaging -eq "nsis")
          {
            $OUTPUT_FOLDER = "./out/$($artifact.rid)";
            Copy-Item -Path "./src/Pororoca.Desktop/Assets/pororoca_icon.ico" -Destination $OUTPUT_FOLDER
          }
        }

    - name: Copy licence
      if: ${{ inputs.runCD }}
      shell: pwsh
      run: |
        $list = $env:DESKTOP_ARTIFACTS_LIST | ConvertFrom-Json;
        foreach ($artifact in $list)
        {
          $OUTPUT_FOLDER = "./out/$($artifact.rid)";
          Copy-Item -Path "./LICENCE.md" -Destination $OUTPUT_FOLDER
        }

    - name: Compress package
      if: ${{ inputs.runCD }}
      shell: pwsh
      run: |
        $list = $env:DESKTOP_ARTIFACTS_LIST | ConvertFrom-Json;
        foreach ($artifact in $list)
        {
          if ($artifact.packaging -eq $null)
          {
            $OUTPUT_FOLDER = "./out/$($artifact.rid)";

            if ($artifact.rid -like "win*") {
              $zipName = "Pororoca_${env:VERSION_NAME}_$($artifact.rid)_portable.zip";
            }
            elseif ($artifact.rid -like "osx*") {
              # temporary renaming while osx-arm64 doesn't work
              # osx-x64 works on Mac OSX ARM64
              $zipName = "Pororoca_${env:VERSION_NAME}_osx.zip";
            } else {
              $zipName = "Pororoca_${env:VERSION_NAME}_$($artifact.rid).zip";
            }
            if ($IsWindows) {
              Compress-Archive -CompressionLevel Optimal -Path $OUTPUT_FOLDER -DestinationPath "./out/${zipName}"
            } else {
              cd $OUTPUT_FOLDER
              zip -9 -r ../${zipName} *
              cd ../..
            }
            Remove-Item $OUTPUT_FOLDER -Force -Recurse -ErrorAction Ignore
          }
        }

    - name: Make installer for Windows
      if: ${{ inputs.runCD }}
      shell: pwsh
      run: |
        $list = $env:DESKTOP_ARTIFACTS_LIST | ConvertFrom-Json;
        foreach ($artifact in $list)
        {
          if ($artifact.packaging -eq "nsis")
          {
            $OUTPUT_FOLDER = "./out/$($artifact.rid)";

            $installerFileName = "Pororoca_${env:VERSION_NAME}_$($artifact.rid)_installer.exe";
            $installerOutFileAbsolutePath = $((Resolve-Path ".\out\").ToString()) + "\" + $installerFileName
            $installerFilesDirAbsolutePath = (Resolve-Path $OUTPUT_FOLDER).ToString()
            # makensis must be added to PATH
            # -WX ` # treat warnings as errors
            # -V2 ` # verbosity no info
            makensis -WX -V2 "/XOutFile ${installerOutFileAbsolutePath}" `
              "/DSHORT_VERSION=${env:VERSION_NAME}" `
              "/DINPUT_FILES_DIR=${installerFilesDirAbsolutePath}" `
              .\src\Pororoca.Desktop.WindowsInstaller\Installer.nsi
            Remove-Item $OUTPUT_FOLDER -Force -Recurse -ErrorAction Ignore
          }
        }

    - name: Make Debian .deb package
      if: ${{ inputs.runCD }}
      shell: pwsh
      run: |
        $list = $env:DESKTOP_ARTIFACTS_LIST | ConvertFrom-Json;
        foreach ($artifact in $list)
        {
          if ($artifact.packaging -eq "debian")
          {
            $OUTPUT_FOLDER = "./out/$($artifact.rid)";

            $debPackageName = "Pororoca_${env:VERSION_NAME}_amd64.deb";
            [void](mkdir "./out/deb")
            # Debian control file
            [void](mkdir "./out/deb/DEBIAN")
            Copy-Item -Path "./src/Pororoca.Desktop.Debian/control" -Destination "./out/deb/DEBIAN"
            # Starter script
            [void](mkdir "./out/deb/usr")
            [void](mkdir "./out/deb/usr/bin")
            Copy-Item -Path "./src/Pororoca.Desktop.Debian/pororoca.sh" -Destination "./out/deb/usr/bin/pororoca"
            chmod +x "./out/deb/usr/bin/pororoca" # set executable permissions to starter script
            # Other files
            [void](mkdir "./out/deb/usr/lib")
            [void](mkdir "./out/deb/usr/lib/pororoca")
            Copy-Item -Path "$OUTPUT_FOLDER/*" -Destination "./out/deb/usr/lib/pororoca" -Recurse -Force
            chmod -R a+rX "./out/deb/usr/lib/pororoca/" # set read permissions to all files
            chmod +x "./out/deb/usr/lib/pororoca/Pororoca" # set executable permissions to main executable
            # Desktop shortcut
            [void](mkdir "./out/deb/usr/share")
            [void](mkdir "./out/deb/usr/share/applications")
            Copy-Item -Path "./src/Pororoca.Desktop.Debian/Pororoca.desktop" -Destination "./out/deb/usr/share/applications/Pororoca.desktop"
            # Desktop icon
            # A 32x32 px XPM file in /usr/share/pixmaps/ (using 1024x1024 px PNG instead, like VS Code uses for its icon)
            [void](mkdir "./out/deb/usr/share/pixmaps")
            Copy-Item -Path "./src/Pororoca.Desktop.Debian/pororoca_icon_1024px.png" -Destination "./out/deb/usr/share/pixmaps/pororoca.png"
            # Hicolor icons
            [void](mkdir "./out/deb/usr/share/icons")
            [void](mkdir "./out/deb/usr/share/icons/hicolor")
            # A 16x16 px PNG file in /usr/share/icons/hicolor/16x16/apps/
            [void](mkdir "./out/deb/usr/share/icons/hicolor/16x16")
            [void](mkdir "./out/deb/usr/share/icons/hicolor/16x16/apps")
            Copy-Item -Path "./src/Pororoca.Desktop.Debian/pororoca_icon_16px.png" -Destination "./out/deb/usr/share/icons/hicolor/16x16/apps/pororoca.png"
            # A 32x32 px PNG file in /usr/share/icons/hicolor/32x32/apps/
            [void](mkdir "./out/deb/usr/share/icons/hicolor/32x32")
            [void](mkdir "./out/deb/usr/share/icons/hicolor/32x32/apps")
            Copy-Item -Path "./src/Pororoca.Desktop.Debian/pororoca_icon_32px.png" -Destination "./out/deb/usr/share/icons/hicolor/32x32/apps/pororoca.png"
            # A 48x48 px PNG file in /usr/share/icons/hicolor/48x48/apps/
            [void](mkdir "./out/deb/usr/share/icons/hicolor/48x48")
            [void](mkdir "./out/deb/usr/share/icons/hicolor/48x48/apps")
            Copy-Item -Path "./src/Pororoca.Desktop.Debian/pororoca_icon_48px.png" -Destination "./out/deb/usr/share/icons/hicolor/48x48/apps/pororoca.png"
            # A 64x64 px PNG file in /usr/share/icons/hicolor/64x64/apps/
            [void](mkdir "./out/deb/usr/share/icons/hicolor/64x64")
            [void](mkdir "./out/deb/usr/share/icons/hicolor/64x64/apps")
            Copy-Item -Path "./src/Pororoca.Desktop.Debian/pororoca_icon_64px.png" -Destination "./out/deb/usr/share/icons/hicolor/64x64/apps/pororoca.png"
            # A 128x128 px PNG file in /usr/share/icons/hicolor/128x128/apps/
            [void](mkdir "./out/deb/usr/share/icons/hicolor/128x128")
            [void](mkdir "./out/deb/usr/share/icons/hicolor/128x128/apps")
            Copy-Item -Path "./src/Pororoca.Desktop.Debian/pororoca_icon_128px.png" -Destination "./out/deb/usr/share/icons/hicolor/128x128/apps/pororoca.png"
            # A 256x256 px PNG file in /usr/share/icons/hicolor/256x256/apps/
            [void](mkdir "./out/deb/usr/share/icons/hicolor/256x256")
            [void](mkdir "./out/deb/usr/share/icons/hicolor/256x256/apps")
            Copy-Item -Path "./src/Pororoca.Desktop.Debian/pororoca_icon_256px.png" -Destination "./out/deb/usr/share/icons/hicolor/256x256/apps/pororoca.png"
            # A 512x512 px PNG file in /usr/share/icons/hicolor/512x512/apps/
            [void](mkdir "./out/deb/usr/share/icons/hicolor/512x512")
            [void](mkdir "./out/deb/usr/share/icons/hicolor/512x512/apps")
            Copy-Item -Path "./src/Pororoca.Desktop.Debian/pororoca_icon_512px.png" -Destination "./out/deb/usr/share/icons/hicolor/512x512/apps/pororoca.png"
            # Optionally, an SVG file in /usr/share/icons/hicolor/scalable/apps/
            [void](mkdir "./out/deb/usr/share/icons/hicolor/scalable")
            [void](mkdir "./out/deb/usr/share/icons/hicolor/scalable/apps")
            Copy-Item -Path "./misc/pororoca_logo.svg" -Destination "./out/deb/usr/share/icons/hicolor/scalable/apps/pororoca.svg"
            # Make .deb file
            dpkg-deb --root-owner-group --build "./out/deb/" "./out/${debPackageName}"
            Remove-Item "./out/deb" -Force -Recurse -ErrorAction Ignore
            Remove-Item $OUTPUT_FOLDER -Force -Recurse -ErrorAction Ignore
          }
        }

    # finished CD steps - desktop

    # upload CD artifacts

    - name: Upload artifacts to workflow results
      if: ${{ inputs.runCD && (inputs.uploadArtifactsToRelease == false) }} # no need if uploading to release
      uses: actions/upload-artifact@v4
      with:
        compression-level: 0 # no need to compress because steps above already compress
        path: './out/*'

    - name: Upload artifacts to release
      if: ${{ inputs.runCD && (inputs.uploadArtifactsToRelease == true) }}
      shell: pwsh
      run: |
        $outputFiles = $(Get-ChildItem ./out/ | Select FullName)
        foreach ($filePath in $outputFiles)
        {
          gh release upload $env:VERSION_NAME $filePath --clobber
        }
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
